
import java.awt.Desktop;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
/**
 *
 * @author Sangharatana Godboley
 */
public class PreprocessorGUI extends javax.swing.JFrame {
    private final Desktop desktop;
    public PreprocessorGUI() {
        desktop=Desktop.getDesktop();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PreprocessorGUI");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Preprocessor");

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Browse C Program File", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION));

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton2.setText("Execute");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(195, 195, 195)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(184, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(236, 236, 236))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
JFileChooser fc= new JFileChooser();
        fc.showOpenDialog(null);
        File f= fc.getSelectedFile();
        String fl=f.getAbsolutePath();
        jTextField1.setText(fl);          // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            preprocessor();        // TODO add your handling code here:
        } catch (IOException ex) {
            Logger.getLogger(PreprocessorGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
     public  void preprocessor() throws FileNotFoundException, IOException {
     BufferedReader fpReadPredicate1 = new BufferedReader(new FileReader(jTextField1.getText()));
     int nameint2=jTextField1.getText().lastIndexOf(".");
     //String newfileane=jTextField1.getText().substring(0, nameint2)+"process.c";
     String newfileane= "process.c";
     PrintWriter out_variables=new PrintWriter(newfileane);
     PrintWriter out_predicates=new PrintWriter("../Predicates.txt");
     out_variables.println("#include<stdio.h>");
     //out_variables.println("#include<conio.h>");
     out_variables.println("#include<string.h>\n" +"#include<stdlib.h>");

     String r=fpReadPredicate1.readLine();
     int number_of_predicates=0;
     int number_of_inputvariables=0;
     int nestedIfElse=0;
     while(r!=null){
         if(r.contains("#include <klee/klee.h>"))
         {out_variables.println("//#include <klee/klee.h>");}
         else if(r.contains("int main(")&&r.contains("{")){
          
          out_variables.println("int main_function(int itffile_num, FILE *wtfinfile){");
         out_variables.println("//------------------added for the input test file reading\n" +
                                "	char itf1[10]={\"input\"};\n" +
                                "    char itf2[10];\n" +
                                "    snprintf(itf2,10," + "\"%d\"" + ",itffile_num);\n" +
                                "    char itf3[10]={\".txt\"};\n" +
                                "    strcat(itf1,itf2);\n" +
                                "    strcat(itf1,itf3);\n" +
                                "    FILE *itf;\n" +
                                "	itf = fopen(itf1, \"r\");\n" +
                                "	//**************************************");
         }
         else if(r.contains("int main(")&&!r.contains("{")){
         
         out_variables.println("int main_function(int itffile_num, FILE *wtfinfile)");
         r=fpReadPredicate1.readLine();
         out_variables.println(r);
         out_variables.println("//------------------added for the input test file reading\n" +
                                "	char itf1[10]={\"input\"};\n" +
                                "    char itf2[10];\n" +
                                "    snprintf(itf2,10,"+ "\"%d\"" +",itffile_num);\n" +
                                "    char itf3[10]={\".txt\"};\n" +
                                "    strcat(itf1,itf2);\n" +
                                "    strcat(itf1,itf3);\n" +
                                "    FILE *itf;\n" +
                                "	itf = fopen(itf1, \"r\");\n" +
                                "	//**************************************");
         }
         else if(r.contains("&&")||r.contains("||")){
             String realr=r;
             if(r.contains("if") && r.contains("else"))
             {   out_variables.println("} else {");
             realr=r.replace("else","");
             nestedIfElse=nestedIfElse+1;
                 System.out.println(""+nestedIfElse);
             }
             else if(r.contains("for(")||r.contains("for (")){
             int h1=r.indexOf(";");
             int h2=r.lastIndexOf(";");
             r=r.substring(h1, h2+1);
             nestedIfElse=0;
             }
             else if(r.contains("dwhile(")||r.contains("dwhile (")){
//                 realr=realr.replace("dwhile(", "while(");
//                 realr=realr.replace("dwhile (", "while (");
                 out_variables.println(realr);
             }

             number_of_predicates++;
             String help_main_line=r;
             r=r.trim();
             int k1=r.indexOf("(");
             int k2=r.lastIndexOf(")");
             r=r.substring(k1, k2+1);
             help_main_line=r;
             System.out.println(""+r);
             r=r.replace("||", "&&");
             int countd=0;
             String contns="";
//             r=r.replaceAll("(", "");
//             r=r.replaceAll(")", "");
              String[] res = r.split("&&");
              for (String rp: res) {
                            countd++;
                            String kh=rp;
                            kh=kh.replace("!((", "");
                            kh=kh.replace("(", "");
                           kh=kh.replace(")", "");
                           contns=contns+",("+kh+")";
                        }
              contns=contns+","+help_main_line+"";
              String dprint="";
              for(int i=1;i<=countd;i++){
                  dprint=dprint+"%d,";
              }
              dprint=dprint+"%d";
              out_predicates.println(help_main_line);
              out_predicates.flush();
              out_variables.println("//------------Adding statements for printing-----------");
              String fornull=help_main_line;
              if(fornull.contains("\\0")){
              fornull=fornull.replace("\\0", "\\\\0");
              };
              out_variables.println("{fprintf(wtfinfile,\"%s\",\"Predicate "+number_of_predicates+":"+fornull+"\\n\");");
              if(nestedIfElse>0)
              {out_variables.println("fprintf(wtfinfile,\""+dprint+"\\n\""+contns+");");}
              else{
              out_variables.println("fprintf(wtfinfile,\""+dprint+"\\n\""+contns+");}");
              }
               out_variables.println("//----------------------------------------------------");
              if(!realr.contains("dwhile(")||!realr.contains("dwhile (")){
              out_variables.println(realr);
              }
         }
         else if(r.contains("klee_make_symbolic")){
             String r1=r;
             int isarray=0;
             int isint=0;
             int ischar=0;
             if(r.contains("int")){
             isint=1;
             }
             if(r.contains("char")){
             ischar=1;
             }
             if(r.contains("*")){isarray=1;}
             int k1=r.indexOf("\"");
             int k2=r.lastIndexOf("\"");
             r=r1.substring(k1+1, k2);
           if(isarray==1)
           {  int k3=r1.indexOf(",");
             int k4=r1.lastIndexOf("*");
             r1=r1.substring(k3+1, k4);
             r1=r1.trim();}


             if(isint==1&&isarray==0){
                 number_of_inputvariables++;
              out_variables.println("//------------for reading values\n" +
"	char itfbuff"+number_of_inputvariables+"[255]; \n" +
"	fscanf(itf, \"%s\", itfbuff"+number_of_inputvariables+");\n" +
"	"+r+"=atoi(itfbuff"+number_of_inputvariables+");");
             }
             else if(isint==1&&isarray==1){
             int sizeofarray=0;
             int result = Integer.parseInt(r1);
             for(int arrdata=0;arrdata<result;arrdata++){
             number_of_inputvariables++;
             String arrayindexedvar=r+"["+arrdata+"]";
             out_variables.println("//------------for reading values\n" +
"	char itfbuff"+number_of_inputvariables+"[255]; \n" +
"	fscanf(itf, \"%s\", itfbuff"+number_of_inputvariables+");\n" +
"	"+arrayindexedvar+"=atoi(itfbuff"+number_of_inputvariables+");");
             }
            }
             else if(ischar==1){
                 number_of_inputvariables++;
                 if(isarray==1){out_variables.println("//------------for reading values\n" +
"	fscanf(itf, \"%s\", "+r+");\n" );}
                 else{
                 out_variables.println("//------------for reading values\n" +
"	char itfbuff"+number_of_inputvariables+"[255]; \n" +
"	fscanf(itf, \"%s\", itfbuff"+number_of_inputvariables+");\n" +
"	"+r+"=itfbuff"+number_of_inputvariables+"[0];");

                 }

             }

            // out_variables.println(r+"=");
         }
         else if(r.contains("klee")&&!r.contains("klee_make_symbolic")){
             out_variables.println("//"+r);
         }
         //yahan chage hue else ko leke
         else if((r.contains(" else ")||r.contains(" else{")||r.contains("else {")||r.contains("	else	")||r.contains("else	{")||r.contains("else"))&& (!(r.contains("} else {")) && nestedIfElse>0)){
         //else if(r.contains("else")&&nestedIfElse>0){


                 System.out.println("mess");
             while(!r.contains("}")){
             out_variables.println(r);
             r=fpReadPredicate1.readLine();
             }
             out_variables.println(r);
             while(nestedIfElse>0){
             out_variables.println("}");
             nestedIfElse--;
             }

         }
         else{
             out_variables.println(r);
         }
         out_variables.flush();
         r=fpReadPredicate1.readLine();
     }

     out_variables.println("int main(){\n" +
"	FILE *fptr;\n" +
"	int itfnos;\n" +
"	int i=0;\n" +
"	char filename[100]={\".txt\"};\n" +
"	char completefilename[100];\n" +
"	printf(\"Enter the file name to store the truth table:\\n\");\n" +
"	scanf(\"%s\", completefilename);\n" +
"    strcat(completefilename,filename);\n" +
"    fptr=fopen(completefilename,\"w\");\n" +
"	printf(\"Enter the number of test data file:\");\n" +
"	scanf(\"%d\",&itfnos);\n" +
"	for(i=1;i<=itfnos;i++){\n" +
"		fprintf(fptr,\"%s%d%s\",\"Test Case File Number is:\",i,\"\\n\");\n" +
"		main_function(i,fptr);\n" +
"	}\n" +
"	return 0;\n" +
"}");
    out_variables.flush();
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PreprocessorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PreprocessorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PreprocessorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PreprocessorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PreprocessorGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
