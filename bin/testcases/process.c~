#include<stdio.h>
#include<string.h>
#include<stdlib.h>
/* 
 * From Williams et al.: "PathCrawler: Automatic Generation of Path
 * Tests by Combining Static and Dynamic Analysis," with added KLEE
 * harness.
 */
#ifdef LLBMC
#include <llbmc.h>
#else
//#include <klee/klee.h>
#endif

int tritype(int i, int j, int k, FILE *wtfinfile){
  int trityp;
//------------Adding statements for printing-----------
{fprintf(wtfinfile,"%s","Predicate 1:((i == 0) || (j == 0) || (k == 0))\n");
fprintf(wtfinfile,"%d,%d,%d,%d\n",(i == 0 ),( j == 0 ),( k == 0),((i == 0) || (j == 0) || (k == 0)));}
//----------------------------------------------------
  if ((i == 0) || (j == 0) || (k == 0)) trityp = 4;
  else {
    trityp = 0;
    if (i == j) trityp = trityp + 1;
    if (i == k) trityp = trityp + 2;
    if (j == k) trityp = trityp + 3;
    if (trityp == 0){
//------------Adding statements for printing-----------
{fprintf(wtfinfile,"%s","Predicate 2:((i+j <= k) || (j+k <= i) || (i+k <= j))\n");
fprintf(wtfinfile,"%d,%d,%d,%d\n",(i+j <= k ),( j+k <= i ),( i+k <= j),((i+j <= k) || (j+k <= i) || (i+k <= j)));}
//----------------------------------------------------
      if ((i+j <= k) || (j+k <= i) || (i+k <= j)) trityp = 4;
      else trityp = 1;
    }
    else if (trityp > 3) trityp = 3;
else
//------------Adding statements for printing-----------
{fprintf(wtfinfile,"%s","Predicate 3:((trityp == 1) && (i+j > k))\n");
fprintf(wtfinfile,"%d,%d,%d\n",(trityp == 1 ),( i+j > k),((trityp == 1) && (i+j > k)));
//----------------------------------------------------
     if ((trityp == 1) && (i+j > k)) trityp = 2;
else
//------------Adding statements for printing-----------
{fprintf(wtfinfile,"%s","Predicate 4:((trityp == 2) && (i+k > j))\n");
fprintf(wtfinfile,"%d,%d,%d\n",(trityp == 2 ),( i+k > j),((trityp == 2) && (i+k > j)));
//----------------------------------------------------
     if ((trityp == 2) && (i+k > j)) trityp = 2;
else
//------------Adding statements for printing-----------
{fprintf(wtfinfile,"%s","Predicate 5:((trityp == 3) && (j+k > i))\n");
fprintf(wtfinfile,"%d,%d,%d\n",(trityp == 3 ),( j+k > i),((trityp == 3) && (j+k > i)));
//----------------------------------------------------
     if ((trityp == 3) && (j+k > i)) trityp = 2;
    else trityp = 4;
  }
}
}
}
  return trityp;
}

int main_function(int itffile_num, FILE *wtfinfile){
//------------------added for the input test file reading
	char itf1[10]={"input"};
    char itf2[10];
    sprintf(itf2,10,"%d",itffile_num);
    char itf3[10]={".txt"};
    strcat(itf1,itf2);
    strcat(itf1,itf3);
    FILE *itf;
	itf = fopen(itf1, "r");
	//**************************************
  int i, j, k;

#ifdef LLBMC
  i = __llbmc_nondef_int();
  j = __llbmc_nondef_int();
  k = __llbmc_nondef_int();
#else
//------------for reading values
	char itfbuff1[255]; 
	fscanf(itf, "%s", itfbuff1);
	i=atoi(itfbuff1);
//------------for reading values
	char itfbuff2[255]; 
	fscanf(itf, "%s", itfbuff2);
	j=atoi(itfbuff2);
//------------for reading values
	char itfbuff3[255]; 
	fscanf(itf, "%s", itfbuff3);
	k=atoi(itfbuff3);
#endif

  tritype(i, j, k, wtfinfile);
  return 0;
}
int main(){
	FILE *fptr;
	int itfnos;
	int i=0;
	char filename[100]={".txt"};
	char completefilename[100];
	printf("Enter the file name to store the truth table:\n");
	scanf("%s", completefilename);
    strcat(completefilename,filename);
    fptr=fopen(completefilename,"w");
	printf("Enter the number of test data file:");
	scanf("%d",&itfnos);
	for(i=1;i<=itfnos;i++){
		fprintf(fptr,"%s%d%s","Test Case File Number is:",i,"\n");
		main_function(i,fptr);
	}
	return 0;
}
